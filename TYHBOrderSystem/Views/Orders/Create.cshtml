@model TYHBOrderSystem.Models.Order

@{
    ViewBag.Title = "Create";
}
<head>
    <title>Order Form</title>
    <link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
    @*<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />*@
</head>

<h2>Create New Order</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">

    <br />
    <h4>Customer Information</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <!--Customer First Name &&& Customer Last Name-->
    <div class="form-row">
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.CUSTOMER.Customer_First_Name, "First Name", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.CUSTOMER.Customer_First_Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CUSTOMER.Customer_First_Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.CUSTOMER.Customer_Last_Name, "Last Name", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.CUSTOMER.Customer_Last_Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CUSTOMER.Customer_Last_Name, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <!-- Primary Phone Number &&& Alt Phone  Number-->
    <div class="form-row">
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.CUSTOMER.Contact_Number, "Primary Contact Number", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.CUSTOMER.Contact_Number, new { htmlAttributes = new { @class = "form-control" } }) <!--id = "primNum", JQUERY VAL -->

                @Html.ValidationMessageFor(model => model.CUSTOMER.Contact_Number, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.CUSTOMER.Alternate_Contact_Number, "Alternate Contact Number", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CUSTOMER.Alternate_Contact_Number, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CUSTOMER.Alternate_Contact_Number, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <!-- Email Address -->
    <div class="form-group">
        @Html.LabelFor(model => model.CUSTOMER.Email_Address, "Email Address", htmlAttributes: new { @class = "control-label col-md-10" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CUSTOMER.Email_Address, new { htmlAttributes = new { @class = "form-control col-md-10" } })
            @Html.ValidationMessageFor(model => model.CUSTOMER.Email_Address, "", new { @class = "text-danger" })
        </div>
    </div>


    <!--Order Details-->
    <br />
    <h4>Order Details</h4>
    <hr />

    <!--- Category Type: Add more descriptive name than 'Categories"-->
    <div class="form-group">
        @Html.Label("Choose Item Category", htmlAttributes: new { @class = "control-label col-md-10" })
        <div class="col-md-10">
            @Html.DropDownList("itemchoice", new SelectList(ViewBag.ProductCategoryList, "Id", "Name"))
        </div>
    </div>

    <!-- Dietary Restritions: Format radio button CSS-->
    <div class="form-row">
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.PRODUCT.Restriction, "Dietary Restriction", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="form-group col-md-10">
                @Html.RadioButton("searching", "1", true) Gluten-Free
                @Html.RadioButton("searching", "2") Keto
                @Html.RadioButton("searching", "3") Paleo
            </div>
            <input type="submit" value="search" asp-action="Create" formmethod="get" />
        </div>
    </div>

    <!---Table for Filter Results of 'Radio Buttons'-->
    <table class="table table-bordered">
        <thead>
            <tr>
                <!--<th scope="col">Product ID</th-->
                <!--<th scope="col">TypeID</th>-->
                <!--<th scope="col">RestrictionID</th>-->
                <th scope="col">Product Flavor</th>
                <th scope="col">Description</th>
                <th scope="col">Seasonal</th>
                <th scope="col">Order Item</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in ViewBag.DietResitrictionSearch)
            {
                <tr>
                    <!--<td>*@@item.ProductId</td>-->
                    <!--<td>*@@item.RestrictionId</td>-->
                    <td>@item.Product_Flavor</td>
                    <td>@item.Product_Description</td>
                    @if (item.Seasonal != false)
                    {
                        <td>@item.Seasonal</td>
                        //if is seasonal change row color of entire item
                    }
                    else
                    {
                        <td> </td>
                        //Don't show 'seasonal' if not true (will need to work on changing color of row if 'true' without showing row or col
                    }

                    <td><input type="radio" name="chosenID" value="@item.ProductId" /></td>
                </tr>

            }
        </tbody>
    </table>

    <!-- Ingredient Subsition, Drop Down Box NOTHING IN DB TO USE THIS AT ALL-->
    <div class="form-group">
        @Html.LabelFor(model => model.Ingredient_Substitution, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @foreach (var ingredient in ViewBag.IngredientSub)
            {
                <div>
                    @ingredient.Ingredient_Name
                    <input type="checkbox" name="substitution" value="@ingredient.Ingredient_ID" />
                </div>
            }

            @Html.ValidationMessageFor(model => model.Ingredient_Substitution, "", new { @class = "text-danger" })
        </div>
    </div>

    <!-- Decoration Comments && Additional Comments-->
    <div class="form-row">
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.Decoration_Comments, "Decoration Comments", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Decoration_Comments, 5, 80, htmlAttributes: new { @class = "control-text-area" })
                @Html.ValidationMessageFor(model => model.Decoration_Comments, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.Additional_Comments, "Additional Comments", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Additional_Comments, 5, 80, new { htmlAttributes = new { @class = "control-text-area" } })
                @Html.ValidationMessageFor(model => model.Additional_Comments, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <!--Primary Key to grab 'Num_Layers' or Other keys-->
    <div class="form-group">
        @Html.LabelFor(model => model.Order_Size_ID, "Order_Size_ID", htmlAttributes: new { @class = "control-label col-md-10" })
        <div class="col-md-10">
            @Html.DropDownList("Order_Size_ID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Order_Size_ID, "", new { @class = "text-danger" })
        </div>
    </div>

    <br />
    <h4>Order Information</h4>
    <hr />

    <!--Order Date: DatePicker JS &&& Order Time-->
    <div class="form-row">
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.Order_Date, "Order Date", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Order_Date, new { htmlAttributes = new { @class = "col-md-10" } })
                @Html.ValidationMessageFor(model => model.Order_Date, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.Order_Time, "Order Time", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Order_Time, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Order_Time, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <!-- Pickup Date: DatePicker JS &&& Pick Up Time-->
    <div class="form-row">
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.PickUp_Due_Date, "Pick Up Date", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PickUp_Due_Date, new { htmlAttributes = new { @class = "datepicker col-md-10" } })
                @Html.ValidationMessageFor(model => model.PickUp_Due_Date, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.PickUp_Time, "Pick-Up Time", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PickUp_Time, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PickUp_Time, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <!-- Employee ID && Customer ID-->
    <div class="form-row">
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.Employee_ID, "Employee_ID", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="col-md-10">
                @Html.DropDownList("Employee_ID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Employee_ID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.Customer_ID, "Customer_ID", htmlAttributes: new { @class = "control-label col-md-10" })
            <div class="col-md-10">
                @Html.DropDownList("Customer_ID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Customer_ID, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <!-- May not need Finishing_ID, commenting out for not needed for input, may need if table is still in use
    <div class="form-group">
        *@@Html.LabelFor(model => model.Finishing_ID, htmlAttributes: new { *@@class = "control-label col-md-2" })
        <div class="col-md-10">
            *@@Html.EditorFor(model => model.Finishing_ID, new { htmlAttributes = new { *@@class = "form-control" } })
            *@@Html.ValidationMessageFor(model => model.Finishing_ID, "", new { *@@class = "text-danger" })
        </div>
    </div>
    -->
    <!-- Ingredient_ID no longer needed in View. Used in Backend
    <div class="form-group">
        *@@Html.LabelFor(model => model.Ingredient_ID, "Ingredient_ID", htmlAttributes: new { *@@class = "control-label col-md-2" })
        <div class="col-md-10">
            *@@Html.DropDownList("Ingredient_ID", null, htmlAttributes: new { *@@class = "form-control" })
            *@@Html.ValidationMessageFor(model => model.Ingredient_ID, "", new { *@@class = "text-danger" })
        </div>
    </div>
        -->
    <!--INT: Product Type ID specifies the product type for 'filtering' (Used in Back end controller for category to restriction ID relation)
        Product_Type_ID Key removed from DB: it is not needed CW 3_16 (Duplicated ID)
    <div class="form-group">
        *@@Html.LabelFor(model => model.Product_Type_ID, htmlAttributes: new { *@@class = "control-label col-md-2" })
        <div class="col-md-10">
            *@@Html.EditorFor(model => model.Product_Type_ID, new { htmlAttributes = new { *@@class = "form-control" } })
            *@@Html.ValidationMessageFor(model => model.Product_Type_ID, "", new { *@@class = "text-danger" })
        </div>
    </div>
    -->

    <!---TESTING VALIDATE WITH BUTTON
    <input type="button" value="testing" id="test" />-->

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/Scripts/jquery-ui-1.12.1.min.js">if</script>

    <script>
        $(function chooseDate() {

            $(".datepicker").datepicker({
                dateFormat: "mm-dd-yy", //format date (For some reason when doing 'mm-dd-yyyy' it's outputting the year 'twice')
                changeMonth: true,
                changeYear: true,
                yearRange: "-1: +5", //year range, -1 (2019) until 5 years from 2020
                showOn: "both",
                buttonText: "<i class='fa fa-calendar'></i>" //name in ' ' is file name from bootstrap css
                });
            });
    </script>
}

    <!---
        <script>
            $(document).ready(function () {
                $('#test').on("click", function () {
                    var phoneNum1 = document.getElementById("primNum");
                    console.log("clicked");
                    if (typeof phoneNum1 !== 'undefined' && phoneNum1 !== null) {
                        alert("Valid Phone Number");
                    }
                    else {
                        phoneNum1 = document.getElementById("primNum");
                        alert(phoneNum1);
                    }
                });
            });

        </script>
    -->

